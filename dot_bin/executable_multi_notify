#!/usr/bin/python3

# pylint: disable=missing-docstring

import argparse
import logging
import os
import subprocess
import sys
from pathlib import Path
from typing import Iterator, Tuple

config_dir = (
    Path(os.getenv("XDG_CONFIG_HOME", Path.home() / ".config")) / "multi_notify"
)
secrets_file = config_dir / "secrets"
notifiers_dir = config_dir / "notifiers.d"

parser = argparse.ArgumentParser(description="Program to notify user in multiple ways")

parser.add_argument("subject", nargs="?", default="")
parser.add_argument("message", nargs="?", default="")
parser.add_argument(
    "--mail",
    action="store_true",
    help="Process stdin as though it's an email; useful for cron output",
)
parser.add_argument(
    "--all",
    action="store_true",
    help=f"Also send notifications via {notifiers_dir}",
)
parser.add_argument(
    "-v",
    "--verbose",
    action="store_true",
)

args = parser.parse_args()
if args.verbose:
    logging.getLogger().setLevel(logging.DEBUG)

try:
    with open(secrets_file, encoding="utf-8") as f:
        secrets_env = {
            k: v.rstrip() for (k, v) in [line.split("=",1) for line in f.readlines()]
        }
except FileNotFoundError:
    logging.info("%s not found, skipping secrets", secrets_file)
    secrets_env = {}
if not notifiers_dir.exists():
    logging.info("%s not found, only local notifiers will be used")


def read_email(input_iterator: Iterator[str]) -> Tuple[str, str]:
    subject = ""
    contents = ""
    for line in input_iterator:
        if line.startswith("Subject:"):
            subject = line[len("Subject:") :].strip()
        if line.strip() == "":
            contents = "".join(input_iterator)
            break
    return (subject, contents.strip())


def ring_bell():
    # This notifies even if the current tmux tab is not focused; configure your
    # terminal to show a popup! Also, leave terminal bells on, it's useful for
    # this case. To stop bash from being annoying, `set bell-style visible` in
    # ~/.inputrc.
    print("\a", end="")


def notify_send(subject: str, message: str):
    if subject == "":
        summary = message
        body = ""
    else:
        summary = subject
        body = message
    subprocess.run(["notify-send", summary, body], check=True)


def hterm_notify(subject: str, message: str):
    # cSpell: word hterm
    if subject == "":
        title = message
        body = ""
    else:
        title = subject
        body = message
    subprocess.run(["hterm-notify.sh", title, body], check=True)


def main():
    subject = ""
    message = ""

    if args.subject:
        if args.mail:
            logging.error("Cannot specify both --mail and a message")
            sys.exit(1)
        else:
            subject = args.subject
            message = args.message
    if args.mail:
        subject, message = read_email(sys.stdin)

    if not subject:
        logging.error("Specify a subject or --mail")
        sys.exit(1)

    ring_bell()
    try:
        hterm_notify(subject, message)
    except Exception:  # pylint: disable=broad-exception-caught
        try:
            notify_send(subject, message)
        except Exception:  # pylint: disable=broad-exception-caught
            pass

    if args.all and notifiers_dir.exists():
        notifiers_env = os.environ.copy()
        notifiers_env.update(secrets_env)
        for notifier in notifiers_dir.iterdir():
            subprocess.run(
                [notifier, f"{subject}\n\n{message}"], check=True, env=notifiers_env
            )


if __name__ == "__main__":
    main()
